<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://kallenosf.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://kallenosf.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-20T06:01:57+00:00</updated><id>https://kallenosf.github.io/feed.xml</id><title type="html">blank</title><subtitle>My personal blog where I delve into the fascinating realms of cybersecurity and computer science. </subtitle><entry><title type="html">Hacked my Uni‚Äôs Alumni System web app</title><link href="https://kallenosf.github.io/blog/2024/ucy/" rel="alternate" type="text/html" title="Hacked my Uni‚Äôs Alumni System web app"/><published>2024-11-20T22:15:00+00:00</published><updated>2024-11-20T22:15:00+00:00</updated><id>https://kallenosf.github.io/blog/2024/ucy</id><content type="html" xml:base="https://kallenosf.github.io/blog/2024/ucy/"><![CDATA[<p><strong>TL;DR :</strong> I discovered a broken access control vulnerability in UCY‚Äôs alumni system web app that allowed me to change other users‚Äô passwords.</p> <h2 id="observation">Observation</h2> <ul> <li>In June 2024 I graduated (üéâ) from the Computer Science Department at the University of Cyprus, and joined the <strong>UCY‚Äôs alumni system</strong> web app.</li> <li>During account registration, I wasn‚Äôt able to choose my own password; instead, a cleartext password was sent to me via email (ü§î).</li> <li>This made me curious about the overall security of the app, and I wondered if I could uncover any critical vulnerabilities.</li> </ul> <h2 id="identifying-the-vulnerability">Identifying the vulnerability</h2> <ul> <li>I noticed that the app has a <strong>reset password</strong> functionality.</li> <li>For this feature, a <code class="language-plaintext highlighter-rouge">POST</code> request was being sent to the <code class="language-plaintext highlighter-rouge">/pub_alumni_open/ALUMNI_V2.alumnis_pck.exec_reset</code> endpoint with two arguments: <code class="language-plaintext highlighter-rouge">email</code> and <code class="language-plaintext highlighter-rouge">new_password</code>.</li> <li>I tested the password reset process by attempting to <strong>reset my own password</strong> while <strong>modifying</strong> the session cookie to check if it was properly validated.</li> <li>To my surprise, the password was <strong>successfully updated</strong> even with an <strong>invalid</strong> session cookie.</li> <li>Next, I <strong>removed</strong> the session cookie <strong>entirely</strong> and sent the password reset request again.</li> <li>Once again, the password was successfully updated. At this point I confirmed that the application <strong>did not verify</strong> whether the user requesting the password change is the actual owner of the email for which the change request is made <a href="https://portswigger.net/web-security/access-control">(Broken Access Control)</a>.</li> <li>In fact the session cookie was not checked at all, meaning a <strong>completely unauthenticated</strong> <code class="language-plaintext highlighter-rouge">POST</code> request to the password change endpoint could succeed.</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ucy/ucy-480.webp 480w,/assets/img/ucy/ucy-800.webp 800w,/assets/img/ucy/ucy-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ucy/ucy.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Notice the absence of the session cookie and the successful response. </div> <h2 id="exploiting-the-vulnerability">Exploiting the vulnerability</h2> <h3 id="extra-testing-accounts">Extra testing accounts</h3> <ul> <li>I wanted to test whether I could <strong>create additional accounts</strong>, and attempt to change their passwords using unauthenticated requests.</li> <li>Although this app is intended exclusively for UCY alumni, I was able to create a second account using the <strong>same ID</strong> and even a <strong>fake ID</strong> like <code class="language-plaintext highlighter-rouge">111111</code></li> <li>This indicates that an attacker could likely create an account without being a UCY graduate.</li> </ul> <h3 id="testing">Testing</h3> <ul> <li>From <code class="language-plaintext highlighter-rouge">accountA</code> I tried to change <code class="language-plaintext highlighter-rouge">accountB</code>‚Äôs password.</li> <li>First, I intercepted the password reset request from <code class="language-plaintext highlighter-rouge">accountA</code>, modified the email parameter to <code class="language-plaintext highlighter-rouge">accountB</code>, and forwarded the request.</li> <li>Then, I logged into <code class="language-plaintext highlighter-rouge">accountB</code> using the newly updated password to confirm the change.</li> <li>Everything worked as expected, proving that the <strong>vulnerability is exploitable</strong>.</li> </ul> <h2 id="reporting">Reporting</h2> <ul> <li>I reported this bug to UCY‚Äôs IT infrastructure team, emphasizing its <u>HIGH</u> risk level.</li> <li>In my report, I included detailed <strong>steps to reproduce</strong> the issue and provided the following <strong>recommendations</strong>: <ul> <li>The application must <strong>deny</strong> any <u>unauthenticated requests</u> or <strong>redirect</strong> them to the login page.</li> <li>During a password change request, the application should <strong>verify</strong> that the email <strong>belongs to the user</strong> associated with the session cookie included in the request.</li> </ul> </li> </ul> <h3 id="ucys-response">UCY‚Äôs response</h3> <ul> <li>The Acting Head of UCY‚Äôs ‚ÄúIT Infrastructure Service‚Äù sent me an email to thank me and informed me that my report was being forwarded to UCY‚Äôs ‚ÄúInformation Applications Services‚Äù and other security professionals.</li> </ul> <div class="row mt-3"> <div class="col-7 mt-3 mt-md-0" style="max-width: fit-content; margin-left: auto; margin-right: auto;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ucy/ucy2-480.webp 480w,/assets/img/ucy/ucy2-800.webp 800w,/assets/img/ucy/ucy2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ucy/ucy2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The next day, I received a phone call from the ‚ÄúInformation Applications Services‚Äù team to thank me once again.</li> <li>Two weeks later, the app was updated, and the issue was <strong>resolved</strong>.</li> </ul>]]></content><author><name></name></author><category term="web"/><category term="broken-access-control"/><summary type="html"><![CDATA[I discovered a broken access control vulnerability in UCY's alumni system web app that allowed me to change other users' passwords.]]></summary></entry><entry><title type="html">BootUp CTF (Cyber Yankee 2024)</title><link href="https://kallenosf.github.io/blog/2024/bootUp-ctf/" rel="alternate" type="text/html" title="BootUp CTF (Cyber Yankee 2024)"/><published>2024-11-20T20:14:00+00:00</published><updated>2024-11-20T20:14:00+00:00</updated><id>https://kallenosf.github.io/blog/2024/bootUp-ctf</id><content type="html" xml:base="https://kallenosf.github.io/blog/2024/bootUp-ctf/"><![CDATA[<p><strong>TL;DR :</strong> Participated in BootUp CTF during Cyber Yankee 2024 exercise (Joint Base Cape Cod, Massachusetts, USA). Scored most points.</p> <h2 id="cyber-yankee-2024">Cyber Yankee 2024</h2> <ul> <li>In May 2024 I particpate in the <a href="https://www.dvidshub.net/image/8396710/massachusetts-national-guard-hosts-cyber-yankee-2024">Cyber Yankee exercise</a> at Joint Base Cape Cod, Massachusetts, USA.</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bootUp-ctf/IMG_3837.heic" sizes="95vw"/> <img src="/assets/img/bootUp-ctf/IMG_3837.heic" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bootUp-ctf/IMG_2923.HEIC" sizes="95vw"/> <img src="/assets/img/bootUp-ctf/IMG_2923.HEIC" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Cyber Yankee is a regionally focused exercise evaluating a whole-of-government <strong>response to a significant cyber incident</strong> involving <u>critical infrastructure and key resources</u>.</li> <li>The exercise includes participants from across military, local, state, and federal government, as well as members working with the <a href="https://www.nationalguard.mil/Leadership/Joint-Staff/J-5/International-Affairs-Division/State-Partnership-Program/">State Partnership Program</a>.</li> <li>Cyber Yankee took place over <strong>two weeks</strong>, with the first week dedicated to <strong>training</strong> and the second week focused on the <strong>actual exercise</strong>.</li> </ul> <h2 id="bootup-ctf">BootUp CTF</h2> <ul> <li>During the first week, a CTF competition called <code class="language-plaintext highlighter-rouge">bootUp CTF</code>, organised by <a href="https://www.sans.org/">SANS</a> was held. Any participant could join and play during their free time.</li> <li>My team finished second ü•à, but I <strong>scored the most points</strong> as an individual and was awarded a SANS coin.</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bootUp-ctf/IMG_2781.JPEG" sizes="95vw"/> <img src="/assets/img/bootUp-ctf/IMG_2781.JPEG" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bootUp-ctf/IMG_3752.HEIC" sizes="95vw"/> <img src="/assets/img/bootUp-ctf/IMG_3752.HEIC" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bootUp-ctf/IMG_2843.HEIC" sizes="95vw"/> <img src="/assets/img/bootUp-ctf/IMG_2843.HEIC" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="ctf"/><summary type="html"><![CDATA[Participated in BootUp CTF during Cyber Yankee 2024 exercise (Joint Base Cape Cod, Massachusetts, USA)]]></summary></entry><entry><title type="html">Race Condition Bug in the Most Popular Greek E-Commerce App</title><link href="https://kallenosf.github.io/blog/2024/bug-bounty/" rel="alternate" type="text/html" title="Race Condition Bug in the Most Popular Greek E-Commerce App"/><published>2024-11-17T14:14:00+00:00</published><updated>2024-11-17T14:14:00+00:00</updated><id>https://kallenosf.github.io/blog/2024/bug-bounty</id><content type="html" xml:base="https://kallenosf.github.io/blog/2024/bug-bounty/"><![CDATA[<p><strong>TL;DR :</strong> I found a race-condition bug in a popular greek e-commerce app, that allowed me to redeem the <u>same gift-card twice</u>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bug-bounty/race-conditions-480.webp 480w,/assets/img/bug-bounty/race-conditions-800.webp 800w,/assets/img/bug-bounty/race-conditions-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bug-bounty/race-conditions.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="race-conditions">Race conditions</h2> <ul> <li>Back in October 2023, I was hunting bugs in a popular greek e-commerce app. Around that time, PortSwigger‚Äôs Web Security Academy published new <a href="https://portswigger.net/web-security/race-conditions?utm_source=chatgpt.com">content</a> on race condition vulnerabilities. This prompted me to explore the app for such issues.</li> <li><u>Race conditions</u> usually occurr when websites handle requests <strong>in parallel without adequate safeguards</strong>, leading to ‚Äúcollisions‚Äù that result in unintended behavior.</li> <li>This type of vulnerability is similar to <strong>business logic</strong> flaws.</li> <li>In a race condition attack, an attacker sends <strong>carefully timed</strong> requests to <strong>intentionally create collisions</strong> and exploit the resulting unintended behavior for malicious purposes.</li> </ul> <h3 id="limit-overrun-race-conditions">Limit overrun race conditions</h3> <ul> <li>The most common type of race condition allows an attacker to <strong>bypass some kind of limit</strong> imposed by the application‚Äôs business logic.</li> <li>For instance, consider an e-shop where a customer wants to use a <strong>one-time</strong> discount code. The application might handle the process as follows:</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bug-bounty/race-conditions1-480.webp 480w,/assets/img/bug-bounty/race-conditions1-800.webp 800w,/assets/img/bug-bounty/race-conditions1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bug-bounty/race-conditions1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Now consider what would happen if a user who has never applied this discount code before tried to apply it <strong>twice at almost exactly the same time</strong>:</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bug-bounty/race-conditions2-480.webp 480w,/assets/img/bug-bounty/race-conditions2-800.webp 800w,/assets/img/bug-bounty/race-conditions2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bug-bounty/race-conditions2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Images from Portswigger's web-security Academy </div> <ul> <li>The application enters a <strong>temporary sub-state</strong> during its operation.</li> <li>This sub-state <strong>starts</strong> when the server <u>begins</u> processing the <u>initial request</u> and <strong>ends</strong> once the <u>database is updated</u> to reflect that the discount code has been used.</li> <li>During this <strong>brief window, a race condition occurs</strong>, allowing users to repeatedly claim the discount multiple times.</li> <li>There are many variations of this kind of attack, including: <ul> <li>Redeeming a gift card multiple times (üòâ)</li> <li>Rating a product multiple times</li> <li>Withdrawing or transferring cash in excess of your account balance</li> <li>Reusing a single CAPTCHA solution</li> <li>Bypassing an anti-brute-force rate limit</li> </ul> </li> </ul> <h2 id="testing-for-race-condition-vulnerabilities">Testing for race condition vulnerabilities</h2> <h3 id="understanding-the-gift-card-functionality">Understanding the gift card functionality</h3> <ul> <li>The app allows users to <strong>purchase gift cards</strong>, so I bought one to test for any potential limit overruns.</li> <li>I noticed that the gift card was <strong>not linked to any specific account</strong>, likely to allow it to be gifted to anyone.</li> <li>I created <strong>three different accounts</strong> and confirmed that all of them could apply the gift card code during checkout, though not simultaneously.</li> </ul> <h3 id="discovering-race-conditions">Discovering race conditions</h3> <ul> <li>During checkout, when a user added a coupon, a <code class="language-plaintext highlighter-rouge">POST</code> request whas being sent to the <code class="language-plaintext highlighter-rouge">/coupons/claim.json</code> endpoint, containing the code in a JSON, such as <code class="language-plaintext highlighter-rouge">{"code":"XXXXXXX"}</code>.</li> <li>I sent this request to <strong>Burp Repeater</strong>, for each session from all three accounts (I used three different browsers to create <strong>separate sessions</strong>, one for each account - although this could also be done in the same browser using a browser extension).</li> <li>Burp Repeater allows you to create a <strong>tab group</strong> and add <strong>multiple requests</strong> together.</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bug-bounty/race-conditions3-480.webp 480w,/assets/img/bug-bounty/race-conditions3-800.webp 800w,/assets/img/bug-bounty/race-conditions3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bug-bounty/race-conditions3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Once I added all three requests to the group tab, I sent them in <strong>parallel</strong>.</li> <li>Sending requests in parallel requires <u>Burp Suite 2023.9 or later!</u></li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bug-bounty/race-conditions4-480.webp 480w,/assets/img/bug-bounty/race-conditions4-800.webp 800w,/assets/img/bug-bounty/race-conditions4-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bug-bounty/race-conditions4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bug-bounty/race-conditions5-480.webp 480w,/assets/img/bug-bounty/race-conditions5-800.webp 800w,/assets/img/bug-bounty/race-conditions5-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bug-bounty/race-conditions5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>By observing the responses, I discovered that the coupon was applied to <strong>more than one</strong> account!</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bug-bounty/race-conditions6-480.webp 480w,/assets/img/bug-bounty/race-conditions6-800.webp 800w,/assets/img/bug-bounty/race-conditions6-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bug-bounty/race-conditions6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bug-bounty/race-conditions7-480.webp 480w,/assets/img/bug-bounty/race-conditions7-800.webp 800w,/assets/img/bug-bounty/race-conditions7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bug-bounty/race-conditions7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>While I couldn‚Äôt get the coupon to apply to all three accounts simultaneously, 90% of the time, it was <strong>successfully</strong> applied to two of the three.</li> <li>I did not attempt to complete a purchase, but I verified that you can proceed through the entire checkout process up to the payment step. Therefore, <strong>this vulnerability is exploitable</strong>.</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bug-bounty/race-conditions8-480.webp 480w,/assets/img/bug-bounty/race-conditions8-800.webp 800w,/assets/img/bug-bounty/race-conditions8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bug-bounty/race-conditions8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The maximum amount for a gift card that can be purchased is <strong>‚Ç¨150</strong>, so an attacker could pay ‚Ç¨150 and use it to buy <strong>‚Ç¨300</strong> worth of items‚Äîrepeating this process an unlimited number of times.</li> </ul> <h3 id="reporting">Reporting</h3> <ul> <li>This app has a bug bounty program in <a href="https://www.bugcrowd.com/">BugCrowd</a>, so I reported the issue there.</li> <li>At first, they couldn‚Äôt reproduce the issue and requested some PoC videos, which I provided.</li> <li>The bug was classified as a <code class="language-plaintext highlighter-rouge">P3</code> and I was awarded <code class="language-plaintext highlighter-rouge">$650</code>.</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bug-bounty/race-conditions9-480.webp 480w,/assets/img/bug-bounty/race-conditions9-800.webp 800w,/assets/img/bug-bounty/race-conditions9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bug-bounty/race-conditions9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>This was my second finding in the same app, as I had previously discovered a <strong>business logic vulnerability</strong> that was classified as <code class="language-plaintext highlighter-rouge">P4</code>.</li> </ul>]]></content><author><name></name></author><category term="web"/><category term="bug-bounty"/><category term="race-conditions"/><summary type="html"><![CDATA[I found a race-condition bug in a popular greek e-commerce app, that allowed me to redeem the same gift-card twice]]></summary></entry></feed>